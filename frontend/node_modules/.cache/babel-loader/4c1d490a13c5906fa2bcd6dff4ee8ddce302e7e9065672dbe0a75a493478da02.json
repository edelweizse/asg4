{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\backend\\\\asg4\\\\frontend\\\\src\\\\Predicts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Navbar from './components/Navbar';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Predicts = () => {\n  _s();\n  const [predictData, setPredictData] = useState([]);\n  const [closeData, setCloseData] = useState([]);\n  const getPredictData = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/predict');\n      setPredictData(res.data);\n    } catch (error) {\n      console.error('Error fetching predicted data:', error);\n    }\n  };\n  const getCloseData = async (start_date, end_date) => {\n    try {\n      const res = await axios.get(`http://localhost:5000/data?field=Close&start_date=${start_date}&end_date=${end_date}`);\n      const formattedData = res.data.map(item => ({\n        ...item,\n        Date: dayjs(item.Date).format('YYYY-MM-DD')\n      }));\n      setCloseData(formattedData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const combineData = () => {\n    const combined = closeData.map(item => ({\n      Date: item.Date,\n      Close: item.Close,\n      isPredicted: false\n    }));\n    const predicted = predictData.map(item => ({\n      Date: item.Date,\n      Close: item.Close,\n      isPredicted: true\n    }));\n    return [...combined, ...predicted].sort((a, b) => new Date(a.Date) - new Date(b.Date));\n  };\n  const combinedData = combineData();\n  const validateDates = (start, end) => {\n    if (dayjs(end).isBefore(dayjs(start))) {\n      alert(\"End date must be greater than start date.\");\n      return false;\n    }\n    if (dayjs(start).isBefore(minDate) || dayjs(start).isAfter(maxDate)) {\n      alert(`Start date must be between ${minDate.format('YYYY-MM-DD')} and ${maxDate.format('YYYY-MM-DD')}.`);\n      return false;\n    }\n    if (dayjs(end).isBefore(minDate) || dayjs(end).isAfter(maxDate)) {\n      alert(`End date must be between ${minDate.format('YYYY-MM-DD')} and ${maxDate.format('YYYY-MM-DD')}.`);\n      return false;\n    }\n    return true;\n  };\n  useEffect(() => {\n    getPredictData();\n    getCloseData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-screen h-screen grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 grid-rows-8 md:grid-rows-7 xl:grid-rows-5 auto-rows-fr gap-6 p-10 bg-gray-900 text-gray-300\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-3 row-span-3\",\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: combinedData,\n            children: [/*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"Date\",\n              tickFormatter: date => new Date(date).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              labelFormatter: label => new Date(label).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"Close\",\n              stroke: \"#8884d8\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"Close\",\n              stroke: \"#ff7300\",\n              dot: false,\n              isAnimationActive: false,\n              connectNulls: true,\n              data: combinedData.filter(item => item.isPredicted),\n              name: \"Predicted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Predicts, \"k59ViM/wrcqrjgUoHN08qdgLoGU=\");\n_c = Predicts;\nexport default Predicts;\nvar _c;\n$RefreshReg$(_c, \"Predicts\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Predicts","_s","predictData","setPredictData","closeData","setCloseData","getPredictData","res","get","data","error","console","getCloseData","start_date","end_date","formattedData","map","item","Date","dayjs","format","combineData","combined","Close","isPredicted","predicted","sort","a","b","combinedData","validateDates","start","end","isBefore","alert","minDate","isAfter","maxDate","children","fileName","_jsxFileName","lineNumber","columnNumber","className","width","height","dataKey","tickFormatter","date","toLocaleDateString","labelFormatter","label","type","stroke","dot","isAnimationActive","connectNulls","filter","name","_c","$RefreshReg$"],"sources":["D:/Projects/backend/asg4/frontend/src/Predicts.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\r\nimport axios from 'axios';\r\n\r\nconst Predicts = () => {\r\n  const [predictData, setPredictData] = useState([]);\r\n  const [closeData, setCloseData] = useState([]);\r\n\r\n\r\n  const getPredictData = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/predict');\r\n      setPredictData(res.data);\r\n    } catch (error) {\r\n      console.error('Error fetching predicted data:', error);\r\n    }\r\n  };\r\n\r\n  const getCloseData = async (start_date, end_date) => {\r\n    try {\r\n      const res = await axios.get(`http://localhost:5000/data?field=Close&start_date=${start_date}&end_date=${end_date}`);\r\n      const formattedData = res.data.map(item => ({\r\n        ...item,\r\n        Date: dayjs(item.Date).format('YYYY-MM-DD'), \r\n      }));\r\n      setCloseData(formattedData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const combineData = () => {\r\n    const combined = closeData.map(item => ({\r\n      Date: item.Date,\r\n      Close: item.Close,\r\n      isPredicted: false,\r\n    }));\r\n\r\n    const predicted = predictData.map(item => ({\r\n      Date: item.Date,\r\n      Close: item.Close,\r\n      isPredicted: true,\r\n    }));\r\n\r\n    return [...combined, ...predicted].sort((a, b) => new Date(a.Date) - new Date(b.Date));\r\n  };\r\n\r\n  const combinedData = combineData();\r\n\r\n  const validateDates = (start, end) => {\r\n    if (dayjs(end).isBefore(dayjs(start))) {\r\n      alert(\"End date must be greater than start date.\");\r\n      return false;\r\n    }\r\n    if (dayjs(start).isBefore(minDate) || dayjs(start).isAfter(maxDate)) {\r\n      alert(`Start date must be between ${minDate.format('YYYY-MM-DD')} and ${maxDate.format('YYYY-MM-DD')}.`);\r\n      return false;\r\n    }\r\n    if (dayjs(end).isBefore(minDate) || dayjs(end).isAfter(maxDate)) {\r\n      alert(`End date must be between ${minDate.format('YYYY-MM-DD')} and ${maxDate.format('YYYY-MM-DD')}.`);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPredictData();\r\n    getCloseData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"w-screen h-screen grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 grid-rows-8 md:grid-rows-7 xl:grid-rows-5 auto-rows-fr gap-6 p-10 bg-gray-900 text-gray-300\">\r\n        <div className=\"col-span-3 row-span-3\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <LineChart data={combinedData}>\r\n            <XAxis dataKey=\"Date\" tickFormatter={date => new Date(date).toLocaleDateString()} />\r\n            <YAxis />\r\n            <Tooltip labelFormatter={label => new Date(label).toLocaleDateString()} />\r\n            <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" dot={false} />\r\n            <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#ff7300\" dot={false} isAnimationActive={false} \r\n                  connectNulls={true} data={combinedData.filter(item => item.isPredicted)} name=\"Predicted\"/>\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Predicts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}