{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\backend\\\\asg4\\\\frontend\\\\src\\\\components\\\\CloseValueLAreaChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { AreaChart, Area, ResponsiveContainer, XAxis, YAxis, Tooltip } from 'recharts';\nimport dayjs from 'dayjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CloseValueLAreaChart = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [startDate, setStartDate] = useState('2008-03-19');\n  const [endDate, setEndDate] = useState('2024-10-21');\n  const minDate = dayjs('2008-03-19');\n  const maxDate = dayjs('2024-10-21');\n  const getData = async (start_date, end_date) => {\n    try {\n      const res = await axios.get(`http://localhost:5000/data?field=Close&start_date=${start_date}&end_date=${end_date}`);\n\n      // Check if the data received is in the expected format\n      console.log(\"Data received from API:\", res.data);\n\n      // Parse the date format to ensure it works with Recharts\n      const formattedData = res.data.map(item => ({\n        ...item,\n        Date: dayjs(item.Date).format('YYYY-MM-DD') // Ensure date is formatted correctly\n      }));\n      console.log(\"Formatted data:\", formattedData); // Log the formatted data\n\n      setData(formattedData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const validateDates = (start, end) => {\n    if (dayjs(end).isBefore(dayjs(start))) {\n      alert(\"End date must be greater than start date.\");\n      return false;\n    }\n    if (dayjs(start).isBefore(minDate) || dayjs(start).isAfter(maxDate)) {\n      alert(`Start date must be between ${minDate.format('YYYY-MM-DD')} and ${maxDate.format('YYYY-MM-DD')}.`);\n      return false;\n    }\n    if (dayjs(end).isBefore(minDate) || dayjs(end).isAfter(maxDate)) {\n      alert(`End date must be between ${minDate.format('YYYY-MM-DD')} and ${maxDate.format('YYYY-MM-DD')}.`);\n      return false;\n    }\n    return true;\n  };\n  useEffect(() => {\n    if (validateDates(startDate, endDate)) {\n      getData(startDate, endDate);\n    }\n  }, [startDate, endDate]);\n\n  // Custom date formatting for X-axis\n  const formatDate = date => dayjs(date).format('DD-MM-YYYY');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center mb-4 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: startDate,\n          onChange: e => setStartDate(e.target.value),\n          className: \"ml-2 p-1 rounded border-2 border-gray-300 bg-gray-800 text-gray-100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: endDate,\n          onChange: e => setEndDate(e.target.value),\n          className: \"ml-2 p-1 rounded border-2 border-gray-300 bg-gray-800 text-gray-100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(AreaChart, {\n        data: data,\n        margin: {\n          top: 10,\n          right: 10,\n          left: -20,\n          bottom: 30\n        },\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"Date\",\n          tickFormatter: formatDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Area, {\n          type: \"monotone\",\n          dataKey: \"Close\",\n          stroke: \"#8884d8\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(CloseValueLAreaChart, \"ZJ652nXjMybPxL2hN2lv69YWzxo=\");\n_c = CloseValueLAreaChart;\nexport default CloseValueLAreaChart;\nvar _c;\n$RefreshReg$(_c, \"CloseValueLAreaChart\");","map":{"version":3,"names":["React","useEffect","useState","axios","AreaChart","Area","ResponsiveContainer","XAxis","YAxis","Tooltip","dayjs","jsxDEV","_jsxDEV","CloseValueLAreaChart","_s","data","setData","startDate","setStartDate","endDate","setEndDate","minDate","maxDate","getData","start_date","end_date","res","get","console","log","formattedData","map","item","Date","format","error","validateDates","start","end","isBefore","alert","isAfter","formatDate","date","className","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","dataKey","tickFormatter","stroke","fill","_c","$RefreshReg$"],"sources":["D:/Projects/backend/asg4/frontend/src/components/CloseValueLAreaChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { AreaChart, Area, ResponsiveContainer, XAxis, YAxis, Tooltip } from 'recharts';\r\nimport dayjs from 'dayjs';\r\n\r\nconst CloseValueLAreaChart = () => {\r\n  const [data, setData] = useState([]);\r\n  const [startDate, setStartDate] = useState('2008-03-19');\r\n  const [endDate, setEndDate] = useState('2024-10-21');\r\n  const minDate = dayjs('2008-03-19');\r\n  const maxDate = dayjs('2024-10-21');\r\n\r\n  const getData = async (start_date, end_date) => {\r\n    try {\r\n      const res = await axios.get(`http://localhost:5000/data?field=Close&start_date=${start_date}&end_date=${end_date}`);\r\n      \r\n      // Check if the data received is in the expected format\r\n      console.log(\"Data received from API:\", res.data);\r\n\r\n      // Parse the date format to ensure it works with Recharts\r\n      const formattedData = res.data.map(item => ({\r\n        ...item,\r\n        Date: dayjs(item.Date).format('YYYY-MM-DD'), // Ensure date is formatted correctly\r\n      }));\r\n\r\n      console.log(\"Formatted data:\", formattedData); // Log the formatted data\r\n      \r\n      setData(formattedData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const validateDates = (start, end) => {\r\n    if (dayjs(end).isBefore(dayjs(start))) {\r\n      alert(\"End date must be greater than start date.\");\r\n      return false;\r\n    }\r\n    if (dayjs(start).isBefore(minDate) || dayjs(start).isAfter(maxDate)) {\r\n      alert(`Start date must be between ${minDate.format('YYYY-MM-DD')} and ${maxDate.format('YYYY-MM-DD')}.`);\r\n      return false;\r\n    }\r\n    if (dayjs(end).isBefore(minDate) || dayjs(end).isAfter(maxDate)) {\r\n      alert(`End date must be between ${minDate.format('YYYY-MM-DD')} and ${maxDate.format('YYYY-MM-DD')}.`);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (validateDates(startDate, endDate)) {\r\n      getData(startDate, endDate);\r\n    }\r\n  }, [startDate, endDate]);\r\n\r\n  // Custom date formatting for X-axis\r\n  const formatDate = (date) => dayjs(date).format('DD-MM-YYYY');\r\n\r\n  return (\r\n    <div className=\"w-full h-full p-4\">\r\n      <div className=\"flex items-center mb-4 gap-4\">\r\n        <label>\r\n          Start Date:\r\n          <input \r\n            type=\"date\" \r\n            value={startDate} \r\n            onChange={(e) => setStartDate(e.target.value)} \r\n            className=\"ml-2 p-1 rounded border-2 border-gray-300 bg-gray-800 text-gray-100\"\r\n          />\r\n        </label>\r\n        <label>\r\n          End Date:\r\n          <input \r\n            type=\"date\" \r\n            value={endDate} \r\n            onChange={(e) => setEndDate(e.target.value)} \r\n            className=\"ml-2 p-1 rounded border-2 border-gray-300 bg-gray-800 text-gray-100\"\r\n          />\r\n        </label>\r\n      </div>\r\n      \r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <AreaChart data={data} margin={{ top: 10, right: 10, left: -20, bottom: 30 }}>\r\n          <XAxis dataKey=\"Date\" tickFormatter={formatDate} />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Area type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CloseValueLAreaChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}