{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\backend\\\\asg4\\\\frontend\\\\src\\\\Predicts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Navbar from './components/Navbar';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Predicts = () => {\n  _s();\n  const [predictData, setPredictData] = useState([]);\n  const [closeData, setCloseData] = useState([]);\n\n  // Fetch predicted data\n  const getPredictData = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/predict');\n      setPredictData(res.data);\n    } catch (error) {\n      console.error('Error fetching predicted data:', error);\n    }\n  };\n\n  // Fetch historical Close data\n  const getCloseData = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/data/?field=Close'); // Update to your actual endpoint for historical data\n      setCloseData(res.data);\n    } catch (error) {\n      console.error('Error fetching historical data:', error);\n    }\n  };\n\n  // Combine historical and predicted data\n  const combineData = () => {\n    // Convert dates to comparable formats and remove potential duplicates\n    const combined = closeData.map(item => ({\n      Date: item.Date,\n      Close: item.Close,\n      isPredicted: false // Indicate that this data is historical\n    }));\n    const predicted = predictData.map(item => ({\n      Date: item.Date,\n      Close: item.Close,\n      isPredicted: true // Indicate that this data is predicted\n    }));\n    return [...combined, ...predicted].sort((a, b) => new Date(a.Date) - new Date(b.Date));\n  };\n\n  // Get combined data for plotting\n  const combinedData = combineData();\n  useEffect(() => {\n    getPredictData();\n    getCloseData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-screen h-screen grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 grid-rows-8 md:grid-rows-7 xl:grid-rows-5 auto-rows-fr gap-6 p-10 bg-gray-900 text-gray-300\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: combinedData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"Date\",\n            tickFormatter: date => new Date(date).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            labelFormatter: label => new Date(label).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"Close\",\n            stroke: \"#8884d8\",\n            dot: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"Close\",\n            stroke: \"#ff7300\",\n            dot: false,\n            isAnimationActive: false,\n            connectNulls: true,\n            data: combinedData.filter(item => item.isPredicted)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Predicts, \"k59ViM/wrcqrjgUoHN08qdgLoGU=\");\n_c = Predicts;\nexport default Predicts;\nvar _c;\n$RefreshReg$(_c, \"Predicts\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Predicts","_s","predictData","setPredictData","closeData","setCloseData","getPredictData","res","get","data","error","console","getCloseData","combineData","combined","map","item","Date","Close","isPredicted","predicted","sort","a","b","combinedData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","width","height","strokeDasharray","dataKey","tickFormatter","date","toLocaleDateString","labelFormatter","label","type","stroke","dot","isAnimationActive","connectNulls","filter","_c","$RefreshReg$"],"sources":["D:/Projects/backend/asg4/frontend/src/Predicts.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\r\nimport axios from 'axios';\r\n\r\nconst Predicts = () => {\r\n  const [predictData, setPredictData] = useState([]);\r\n  const [closeData, setCloseData] = useState([]);\r\n\r\n  // Fetch predicted data\r\n  const getPredictData = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/predict');\r\n      setPredictData(res.data);\r\n    } catch (error) {\r\n      console.error('Error fetching predicted data:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch historical Close data\r\n  const getCloseData = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/data/?field=Close'); // Update to your actual endpoint for historical data\r\n      setCloseData(res.data);\r\n    } catch (error) {\r\n      console.error('Error fetching historical data:', error);\r\n    }\r\n  };\r\n\r\n  // Combine historical and predicted data\r\n  const combineData = () => {\r\n    // Convert dates to comparable formats and remove potential duplicates\r\n    const combined = closeData.map(item => ({\r\n      Date: item.Date,\r\n      Close: item.Close,\r\n      isPredicted: false, // Indicate that this data is historical\r\n    }));\r\n\r\n    const predicted = predictData.map(item => ({\r\n      Date: item.Date,\r\n      Close: item.Close,\r\n      isPredicted: true, // Indicate that this data is predicted\r\n    }));\r\n\r\n    return [...combined, ...predicted].sort((a, b) => new Date(a.Date) - new Date(b.Date));\r\n  };\r\n\r\n  // Get combined data for plotting\r\n  const combinedData = combineData();\r\n\r\n  useEffect(() => {\r\n    getPredictData();\r\n    getCloseData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"w-screen h-screen grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 grid-rows-8 md:grid-rows-7 xl:grid-rows-5 auto-rows-fr gap-6 p-10 bg-gray-900 text-gray-300\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <LineChart data={combinedData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"Date\" tickFormatter={date => new Date(date).toLocaleDateString()} />\r\n            <YAxis />\r\n            <Tooltip labelFormatter={label => new Date(label).toLocaleDateString()} />\r\n            <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" dot={false} />\r\n            <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#ff7300\" dot={false} isAnimationActive={false} \r\n                  connectNulls={true} data={combinedData.filter(item => item.isPredicted)} />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Predicts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}